// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
  GUEST
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  role                  UserRole               @default(USER)
  image                 String?
  password              String?
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  reviews               Review[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PassordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Store {
  id         String      @id @default(cuid())
  name       String      @unique
  userId     String
  billboards Billboard[] @relation("storeToBillboard")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  category   Category[]  @relation("storeToCategory")
  size       Size[]      @relation("storeToSize")
  color      Color[]     @relation("storeToColor")
  Product    Product[]   @relation("storeToProduct")
  Order      Order[]     @relation("storeToProduct")
}

model Billboard {
  id         String     @id @default(cuid())
  store      Store      @relation(fields: [storeId], references: [id], "storeToBillboard")
  storeId    String
  categories Category[] @relation("billboardToCategory")
  label      String
  imageUrl   String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id          String    @id @default(cuid())
  storeId     String
  store       Store     @relation("storeToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation("billboardToCategory", fields: [billboardId], references: [id])
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Product     Product[] @relation("categoryToProduct")
}

model Size {
  id        String    @id @default(cuid())
  storeId   String
  store     Store     @relation("storeToSize", fields: [storeId], references: [id])
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  Product   Product[] @relation("sizeToProduct")
}

model Color {
  id        String    @id @default(cuid())
  storeId   String
  store     Store     @relation("storeToColor", fields: [storeId], references: [id])
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  Product   Product[] @relation("colorToProduct")
}

model Product {
  id          String      @id @default(cuid())
  storeId     String
  store       Store       @relation("storeToProduct", fields: [storeId], references: [id])
  categoryId  String
  category    Category    @relation("categoryToProduct", fields: [categoryId], references: [id])
  name        String
  price       Float
  inStock     Boolean     @default(true)
  description String
  reviews     Review[]
  quantity    Int
  isFeatured  Boolean     @default(false)
  isArchived  Boolean     @default(false)
  sizeId      String
  size        Size        @relation("sizeToProduct", fields: [sizeId], references: [id])
  color       Color       @relation("colorToProduct", fields: [colorId], references: [id])
  colorId     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Image       Image[]
  OrderItem   OrderItem[]
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Image {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id        String      @id @default(cuid())
  storeId   String
  store     Store       @relation("storeToProduct", fields: [storeId], references: [id])
  OrderItem OrderItem[]
  isPaid    Boolean     @default(false)
  phone     String      @default("")
  address   String      @default("")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
}
